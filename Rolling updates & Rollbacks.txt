ROLLING UPDATES AND ROLLBACKS




    * When updating the Deployment, what happens to the Deployment?
          - Will the old Pods be removed first and then restarted?
          - Application Downtime?





    * What is a ReplicaSet?

         * Deployment
            - Creates an application rollout



         * ReplicaSet
            - Created automatically in the background
            - Ensure that a specified number of Pod replicas are running at any qiven time



   

 ________________            ________________            __________
/   Deployment   \ ------>  /   ReplicaSet   \ ------>  /   Pods   \ 
 -----------------          ------------------          ------------





    * We work with Deployment

    * K8s creates ReplicaSet in background

    * ReplicaSet creates Pods



  

    * Update Deployment - Strategies
 
      In which order do Pods get removed and new ones created?
         i.  Recreate Strategy: All existing Pods are killed before new ones are created (But it cause the Application Downtime ❌)
         ii. Rolling Update Strategy: The Deployment updates Pods in a rolling update fashion (No Application Downtime ✅)


    
    *  ReplicaSet and its Pods are linked.
    *  Name of ReplicaSet: [Deployment-Name]-[Random-string]




  If you describe one of your existing Deployments. you should see:


$ kubectl describe deployment nginx-deployment

[...]
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
[...]




    * You can specify how many Pods to update at once
        - Instead of deleting/creating Pods one by one
        - You may want to update 5 at once



    *  Max Unavailable: Specifies the max number of Pods that can be unavailable during the update process
    *  Max Surge: Specifies the max number of Pods that can be created over the desired number of Pods



    
 * Rollout History
    - When a Deployment Rollout is triggered, a new Deployment revision is created
    - NOTE: A new revision is only created when the Deployment's Pod template is changed
    - kubectl rollout history deployment <deployment-name>





$ kubectl rollout history deployment nginx-deployment

deployment.apps/nginx-deployment 
REVISION  CHANGE-CAUSE # Here we have 5 revision
1         <none>
2         <none>
4         <none>
5         <none>




  Rollback

     * Rollout to a previous revision
         kubectl rollout undo deployment/nginx-deployment --to-revision=0 # The revision to rollback to. Default to 0 (last revision)


     * Check status
         kubectl rollout status deployment/nginx-deployment





   
