ABAC- Attribute-based authorization is where you associate a user or a group of users with a set of permissions.

RBAC- Role based access control.
  
   * We create a role with the set of permissions required for developers then we associate all the developers to that role.




Users & Permissions

* How Authentication and Authorization works in Kubernetes

* How to configure users, groups, and their permissions

* Authorization with Role Based Access Control (RBAC).

* Which K8s resources to use to define permissions in the cluster




Role & Role Binding

  Role:

      * With the Role component, you can define namespaced permissions
 
      * Bound to a specific Namespace

      * What resources in that namespace can you access? (Pod, Deployment, Service, ...)

      * What action can you do with this resource? ("list", "get" "update", "delete", ...)

      * Define Resources and Access Permissions
          -No information on WHO gets these permissions



     

      *How to attach Role Definition to a person or team?
 
   RoleBinding:
      
      * Link ("Bind") a Role to a User or Group

      * All members of the Group get permissions defined in the Role




Cluster Role & ClusterRole Binding

How about K8s Admins?

   - How about K8s Admins?

   - Configuring cluster-wide Volumes

   

ClusterRole:
    
      * Defines resources and permissions 'cluster wide'
    

ClusterRoleBinding:

      * Link ("Bind") a ClusterRole to a User or Group





User & Groups in Kubernetes


How do we create Users and Groups?

      * Kubernetes doesn't manage Users natively

      * Admins can choose from different authentication strategies

      * No Kubernetes Objects exist for representing regular user accounts




External Source for Authentication

   1. Static Token File
   2. Certificates
   3. 3rd Party Identity Service





      * Admin configure external source
      * API Server handles authentication of all the requests
      * API Server uses one of these configured authentication methods




*  Example for Tokens (users.csv):

aWpoZGZzaXNoaWZsa2pldWwK, user_1, u1001,group1
aWpoZGZzaXNoaWZoc2Roc2Ru, user_2, u1002,group2
aWpoZGZzaXNoaWZzc3Nzc3MK, user_3, u1005,group3



Pass token file via --token-auth-file=/users.csv command option

    kube-apiserver --token-auth-file=/users.csv [other options]
    
    





Example Configuration Files

 * Role Configuration File



apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: my-app
  name: developer
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
    resourceNames: # Optional
      - "myapp"
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
    resourceNames: # Optional
      - "myapp"





* apigroups: "" Indicates the core API group
* resources: K8s components like Pods, Deployments, etc.
* verbs:
    - The actions on a resource
    - get, list (read-only) or create, update (read-write)


* resourceNames: Define access to only certain pods in that namespace




Rolebinding Configuration File


apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jane-developer-binding
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: jane
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: developer





* ClusterRole Configuration File


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - create
      - delete
      - update



1. Define access for cluster-wide resources
2. Define access for namespace resources




Creating & Viewing RBAC Resources

  * Create Role, ClusterRole, etc. just like any other Kubernetes component

     kubectl apply -f <ROLE-MANIFEST.YAML>




  * View Components with get and describe command
    
     kubectl get roles
     kubectl describe role <NAME>



















