CONFIG MAPS- Config maps are used to pass configuration data in the form of key value pairs in Kubernetes.


   What is the best way to pass external configuration in K8's
       - Config maps
       - secrets  



Both allow you to decouple environment-specific configuration from your container images

    ConfigMap: Regular non-confidential data, like database URL
    Secret: Use to store sensitive data (The built-in security mechanism is not enabled by default!)
   


Pods can consume ConfigMaps or Secrets in 2 different ways:
 
i.  As individual values --> Using Environment Variables
ii. As configuration files --> Using Volumes





   

2  PHASES INVOLVED IN CREATING CONFIG-MAPS
          i. Create config map
          ii.Inject into pod





Demo: Pass as Environment Variables
  
Steps:
  
  1. Create ConfigMap component
  2. Create Secret component
  3. Pass Data to Pod using Environment Variables





Create ConfigMap component

apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
data:
  db_host: mysql_service




Create Secret component

apiVersion: v1
kind: Secret
metadata:
  name: myapp-secret
type: Opaque # Have many type
data: # Values must be "base64" encoded stings.
  username: bXl1c2Vy # See below command
  password: bXlwd2Q=



# To encode values in base64 format:
    
     echo -n "myuser" | base64


- Refer to documentation for other secret types







Pass Data to Pod using Evironment Variables


apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  labels:
    app: my-app
spec:
  selector:
    matchLabels:
      app: my-app
  replicas: 1
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app
          image: busybox
          command: [ 'sh', 'c', "printenv MYSQL_USER MYSQL_PWD MYSQL_SERVER; sleep 10" ]
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: myapp-secret
                  key: username
            - name: MYSQL_PWD
              valueFrom:
                secretKeyRef:
                  name: myapp-secret
                  key: password
            - name: MYSQL_SERVER
              valueFrom:
                configMapKeyRef:
                  name: myapp-config
                  key: db_host







# Secrets and ConfigMap resources must already exist, when creating the Deployment resource





Demo: Pass as File as Volume

Often applications use a configuration File, rather than just individual values
  i.  Create configuration file via ConfigMap & Secret
  ii. Pass to Pod configuration via Volume



Create configuration file via ConfigMap & Secrets


Create ConfigMap

apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config-file
data:
  mysql.conf: |
    [mysqld]
    port=3306
    socket=/tmp/mysql.sock
    key_buffer_size=16M
    max_allowed_packet=128M





Create Secret

apiVersion: v1
kind: Secret
metadata:
  name: myapp-secret-file
type: Opaque
data:
  secret.file: |
    "base64" ENCODED FILE VALUE VIA --> base64 FILE | tr -d "\n"



Pass to Pod configuration via Volume

- configMap & Secret are K8s Volume Types


- REVIEW
i.  Define Volumes on Pod level
ii. Mount Volume into container




apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-db
  labels:
    app: my-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-db
  template:
    metadata:
      labels:
        app: my-db
    spec:
      containers:
        - name: mysql
          image: busybox:1.28
          command: [ 'sh', '-c', "cat /mysql/db-config/mysql.conf; /mysql/db-secret/secret.file; sleep 20" ]
          volumeMounts:
            - name: db-coinfig
              mountPath: /mysql/db-config
            - name: db-secret
              mountPath: /mysql/db-secret
              readOnly: true
      volumes:
        - name: db-coinfig
          configMap:
            name: myapp-config-file
        - name: db-secret
          secret:
            secretName: myapp-secret-file



apply the file and check its logs!




Note on Updating ConfigMap or Secret

* When updating configMap or secret, Pods don't get the up-to-date data automatically.

* for that, you have to restart the pods

     kubectl rollout restart deployment/my-db









